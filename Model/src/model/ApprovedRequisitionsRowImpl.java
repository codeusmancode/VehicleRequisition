package model;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.Timestamp;

import model.common.ApprovedRequisitionsRow;

import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 08 12:10:18 PKT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ApprovedRequisitionsRowImpl extends ViewRowImpl implements ApprovedRequisitionsRow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        EmpName,
        DeptName,
        VrReqId,
        VrRequisitionNumber,
        DepId,
        VrDemandDate,
        VrRequiredDate,
        VehicleTypeId,
        Purpose,
        ApproxDuration,
        ApproxDistance,
        Status,
        VrOrgId,
        CreatedBy,
        CreatedDate,
        LastUpdatedBy,
        LastUpdatedDate,
        VersionNumber,
        UserId,
        Destination,
        ReqHr,
        ReqMi,
        FinalTime,
        VehicleNumber;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EMPNAME = AttributesEnum.EmpName.index();
    public static final int DEPTNAME = AttributesEnum.DeptName.index();
    public static final int VRREQID = AttributesEnum.VrReqId.index();
    public static final int VRREQUISITIONNUMBER = AttributesEnum.VrRequisitionNumber.index();
    public static final int DEPID = AttributesEnum.DepId.index();
    public static final int VRDEMANDDATE = AttributesEnum.VrDemandDate.index();
    public static final int VRREQUIREDDATE = AttributesEnum.VrRequiredDate.index();
    public static final int VEHICLETYPEID = AttributesEnum.VehicleTypeId.index();
    public static final int PURPOSE = AttributesEnum.Purpose.index();
    public static final int APPROXDURATION = AttributesEnum.ApproxDuration.index();
    public static final int APPROXDISTANCE = AttributesEnum.ApproxDistance.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int VRORGID = AttributesEnum.VrOrgId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int VERSIONNUMBER = AttributesEnum.VersionNumber.index();
    public static final int USERID = AttributesEnum.UserId.index();
    public static final int DESTINATION = AttributesEnum.Destination.index();
    public static final int REQHR = AttributesEnum.ReqHr.index();
    public static final int REQMI = AttributesEnum.ReqMi.index();
    public static final int FINALTIME = AttributesEnum.FinalTime.index();
    public static final int VEHICLENUMBER = AttributesEnum.VehicleNumber.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ApprovedRequisitionsRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute EmpName.
     * @return the EmpName
     */
    public String getEmpName() {
        return (String) getAttributeInternal(EMPNAME);
    }


    /**
     * Gets the attribute value for the calculated attribute DeptName.
     * @return the DeptName
     */
    public String getDeptName() {
        return (String) getAttributeInternal(DEPTNAME);
    }

    /**
     * Gets the attribute value for the calculated attribute VrReqId.
     * @return the VrReqId
     */
    public BigDecimal getVrReqId() {
        return (BigDecimal) getAttributeInternal(VRREQID);
    }

    /**
     * Gets the attribute value for the calculated attribute VrRequisitionNumber.
     * @return the VrRequisitionNumber
     */
    public BigDecimal getVrRequisitionNumber() {
        return (BigDecimal) getAttributeInternal(VRREQUISITIONNUMBER);
    }

    /**
     * Gets the attribute value for the calculated attribute DepId.
     * @return the DepId
     */
    public String getDepId() {
        return (String) getAttributeInternal(DEPID);
    }

    /**
     * Gets the attribute value for the calculated attribute VrDemandDate.
     * @return the VrDemandDate
     */
    public Timestamp getVrDemandDate() {
        return (Timestamp) getAttributeInternal(VRDEMANDDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute VrRequiredDate.
     * @return the VrRequiredDate
     */
    public Timestamp getVrRequiredDate() {
        return (Timestamp) getAttributeInternal(VRREQUIREDDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute VehicleTypeId.
     * @return the VehicleTypeId
     */
    public BigDecimal getVehicleTypeId() {
        return (BigDecimal) getAttributeInternal(VEHICLETYPEID);
    }

    /**
     * Gets the attribute value for the calculated attribute Purpose.
     * @return the Purpose
     */
    public String getPurpose() {
        return (String) getAttributeInternal(PURPOSE);
    }

    /**
     * Gets the attribute value for the calculated attribute ApproxDuration.
     * @return the ApproxDuration
     */
    public String getApproxDuration() {
        return (String) getAttributeInternal(APPROXDURATION);
    }

    /**
     * Gets the attribute value for the calculated attribute ApproxDistance.
     * @return the ApproxDistance
     */
    public BigDecimal getApproxDistance() {
        return (BigDecimal) getAttributeInternal(APPROXDISTANCE);
    }

    /**
     * Gets the attribute value for the calculated attribute Status.
     * @return the Status
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Gets the attribute value for the calculated attribute VrOrgId.
     * @return the VrOrgId
     */
    public BigDecimal getVrOrgId() {
        return (BigDecimal) getAttributeInternal(VRORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute CreatedBy.
     * @return the CreatedBy
     */
    public BigDecimal getCreatedBy() {
        return (BigDecimal) getAttributeInternal(CREATEDBY);
    }

    /**
     * Gets the attribute value for the calculated attribute CreatedDate.
     * @return the CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public BigDecimal getLastUpdatedBy() {
        return (BigDecimal) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Gets the attribute value for the calculated attribute LastUpdatedDate.
     * @return the LastUpdatedDate
     */
    public Timestamp getLastUpdatedDate() {
        return (Timestamp) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute VersionNumber.
     * @return the VersionNumber
     */
    public BigDecimal getVersionNumber() {
        return (BigDecimal) getAttributeInternal(VERSIONNUMBER);
    }

    /**
     * Gets the attribute value for the calculated attribute UserId.
     * @return the UserId
     */
    public BigDecimal getUserId() {
        return (BigDecimal) getAttributeInternal(USERID);
    }

    /**
     * Gets the attribute value for the calculated attribute Destination.
     * @return the Destination
     */
    public String getDestination() {
        return (String) getAttributeInternal(DESTINATION);
    }

    /**
     * Gets the attribute value for the calculated attribute ReqHr.
     * @return the ReqHr
     */
    public BigDecimal getReqHr() {
        return (BigDecimal) getAttributeInternal(REQHR);
    }

    /**
     * Gets the attribute value for the calculated attribute ReqMi.
     * @return the ReqMi
     */
    public BigDecimal getReqMi() {
        return (BigDecimal) getAttributeInternal(REQMI);
    }

    /**
     * Gets the attribute value for the calculated attribute FinalTime.
     * @return the FinalTime
     */
    public Timestamp getFinalTime() {
        return (Timestamp) getAttributeInternal(FINALTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FinalTime.
     * @param value value to set the  FinalTime
     */
    public void setFinalTime(Timestamp value) {
        setAttributeInternal(FINALTIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute VehicleNumber.
     * @return the VehicleNumber
     */
    public String getVehicleNumber() {
        return (String) getAttributeInternal(VEHICLENUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute VehicleNumber.
     * @param value value to set the  VehicleNumber
     */
    public void setVehicleNumber(String value) {
        setAttributeInternal(VEHICLENUMBER, value);
    }

    public void finalizeTravel(){
        
        Timestamp time =  getFinalTime();
        Date d = new Date(time.getTime());
        int reqid = getVrReqId().intValue();
        CallableStatement cst = null;
        String message = "Vehicle Availability Confirmed. Data and time is:"+time.toString();
        try{
            cst = getDBTransaction().createCallableStatement("{call APPS.vrf_engine.finalizeTravel(?,?,?,?)}", 0);
            cst.setInt(1, reqid);
            cst.setString(2, message);
            cst.setDate(3, d);
            cst.setString(4, getVehicleNumber());
            cst.executeUpdate();
            
            
        }catch(Exception ex){
            ex.printStackTrace();
        }   
    }
}

